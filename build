#!/usr/bin/env bash

IMAGER="`command -v mkisofs`"
[ "${IMAGER}" = "" ] && IMAGER="`command -v genisoimage`"
[ "${IMAGER}" = "" ] && echo "Can not found mkisofs or genisoimage" && exit 1
for i in mksquashfs cpio gzip sed grep; do
	if [ ! -x `command -v ${i}` ]; then
		echo "Please install ${i} app to run this tool"
		exit 1
	fi
done

cd "$(dirname $(readlink -f ${0}))"
cp -f config .config

list=(`find /boot -name "vmlinuz*" -o -name "*kernel*" -o -name "bzImage"`)
[ `echo ${lists} | wc -l`!=1 ] && many_kernels="true"
if [ ${many_kernels} ]; then
	n=0
	echo -e "There are too many kernels\nPlease choose your kernel to proceed:\nPlease choose number from ${n} to ${#list[@]}\n-----\n"
	for a in ${list[@]}; do
		echo "[${n}] - ${a}"
		((n++))
	done
	echo "-----"
	read kernel
	kernel="${list[${kernel}]}"
	unset list n
else
	kernel="${list[0]}"
fi
echo "KERNEL=\"${kernel}\"" >>.config
echo "LMK=\"/lib/modules/`file -bL ${kernel} | grep -o 'version [^ ]*' | cut -d ' ' -f 2`\"" >>.config
unset kernel
top="`pwd`"
. .config
cd initrd
chmod +x create
INITRD="`./create ${DISTRO}`"
cd ..
DATA="`mktemp -d`"
BOOT="${DATA}"
temp_root="`mktemp -d`"
mkdir -p ${temp_root}/rootfs ${DATA}/changes ${DATA}/${DISTRO}
echo "rsync --force -aA --exclude=/dev/* --exclude=/proc/* --exclude=/sys/* --exclude=/tmp/* / ${temp_root}/rootfs" > ${temp_root}/rsync_cmd
chmod +x -R ${temp_root}/rsync_cmd copyroot
cp -rf copyroot/* ${temp_root}/rootfs
${temp_root}/rsync_cmd && \
mknod ${temp_root}/rootfs/dev/console c 5 1 && \
mknod ${temp_root}/rootfs/dev/null c 1 3 && \
mknod ${temp_root}/rootfs/dev/ram0 b 1 0 && \
mknod ${temp_root}/rootfs/dev/tty1 c 4 1 && \
mknod ${temp_root}/rootfs/dev/tty2 c 4 2 && \
mknod ${temp_root}/rootfs/dev/tty3 c 4 3 && \
mknod ${temp_root}/rootfs/dev/tty4 c 4 4 && \
if ! mksquashfs ${temp_root}/rootfs ${DATA}/${DISTRO}/system.sfs -comp xz; then
	rm -f ${DATA}/${DISTRO}/system.sfs
	if ! mksquashfs ${temp_root}/rootfs ${DATA}/${DISTRO}/system.sfs; then
		echo -e "\nCan't create \"system.sfs\" file!\nAborting!\n"
		rm -rf ${temp_root} ${DATA}
		exit 1
	fi
fi
mv -f ${INITRD} ${BOOT}/initrfs.img
cp -rf bootfiles/* ${BOOT}
mv -f ${temp_root}/rootfs/tmp/grub_efi.img ${DATA}/efi.img
sed -i -r "s/__DISTRO__/${DISTRO}/" ${BOOT}/syslinux.cfg
sed -i -r "s/__DISTRO__/${DISTRO}/" ${BOOT}/boot/grub/grub.cfg
cp -f ${KERNEL} ${BOOT}/vmlinuz
cd ${DATA}
timedate="`date +"%d-%m-%Y"`"
${IMAGER} -o /${DISTRO}-${timedate}.iso -J -R -D -A ${DISTRO} -V ${DISTRO} -no-emul-boot -boot-info-table -boot-load-size 4 -b isolinux.bin -c isolinux.boot .
[ -x `command -v isohybrid` ] && isohybrid /${DISTRO}-${timedate}.iso
cd ${top}
rm -rf ${temp_root} ${DATA}
